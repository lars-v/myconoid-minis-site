---
// Multi-image Lightbox component with navigation
---

<div id="lightbox" class="lightbox">
  <span class="lightbox-close">&times;</span>
  <div class="lightbox-nav lightbox-prev" id="lightbox-prev">❮</div>
  <div class="lightbox-nav lightbox-next" id="lightbox-next">❯</div>
  <div class="lightbox-container">
    <img class="lightbox-content" id="lightbox-img" />
    <div class="lightbox-caption" id="lightbox-caption"></div>
    <div class="lightbox-counter" id="lightbox-counter"></div>
  </div>
</div>

<style>
  .lightbox {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.95);
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .lightbox-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 95vw;
    height: 95vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .lightbox-content {
    max-width: 100%;
    max-height: 80vh;
    width: auto;
    height: auto;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 4px 30px rgba(0, 0, 0, 0.5);
    animation: zoomIn 0.3s ease-in-out;
    transition: opacity 0.2s ease;
  }

  @keyframes zoomIn {
    from { 
      transform: scale(0.8);
      opacity: 0;
    }
    to { 
      transform: scale(1);
      opacity: 1;
    }
  }

  .lightbox-close {
    position: fixed;
    top: 20px;
    right: 30px;
    color: #ffffff;
    font-size: 50px;
    font-weight: bold;
    transition: all 0.3s ease;
    cursor: pointer;
    z-index: 1001;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: 1;
  }

  .lightbox-close:hover,
  .lightbox-close:focus {
    color: #ff6b6b;
    background: rgba(0, 0, 0, 0.8);
    transform: scale(1.1);
  }

  .lightbox-nav {
    position: fixed;
    top: 50%;
    transform: translateY(-50%);
    color: #ffffff;
    font-size: 60px;
    font-weight: bold;
    cursor: pointer;
    z-index: 1001;
    background: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    width: 80px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    user-select: none;
  }

  .lightbox-prev {
    left: 30px;
  }

  .lightbox-next {
    right: 30px;
  }

  .lightbox-nav:hover {
    background: rgba(0, 0, 0, 0.8);
    color: #4a9eff;
    transform: translateY(-50%) scale(1.1);
  }

  .lightbox-nav.disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .lightbox-nav.disabled:hover {
    background: rgba(0, 0, 0, 0.5);
    color: #ffffff;
    transform: translateY(-50%) scale(1);
  }

  .lightbox-caption {
    color: #ffffff;
    text-align: center;
    padding: 15px 20px;
    font-size: 18px;
    font-weight: 500;
    background: rgba(0, 0, 0, 0.7);
    border-radius: 8px;
    margin-top: 20px;
    max-width: 80%;
    backdrop-filter: blur(10px);
  }

  .lightbox-counter {
    color: #ffffff;
    text-align: center;
    padding: 8px 15px;
    font-size: 14px;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 20px;
    margin-top: 10px;
    backdrop-filter: blur(10px);
  }

  .clickable-image {
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .clickable-image:hover {
    transform: scale(1.02);
    filter: brightness(1.05);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  /* Mobile responsive */
  @media only screen and (max-width: 768px) {
    .lightbox-container {
      width: 98vw;
      height: 98vh;
    }
    
    .lightbox-content {
      max-height: 75vh;
    }
    
    .lightbox-close {
      top: 15px;
      right: 15px;
      font-size: 40px;
      width: 50px;
      height: 50px;
    }
    
    .lightbox-nav {
      font-size: 40px;
      width: 60px;
      height: 60px;
    }
    
    .lightbox-prev {
      left: 15px;
    }
    
    .lightbox-next {
      right: 15px;
    }
    
    .lightbox-caption {
      font-size: 16px;
      padding: 12px 15px;
      margin-top: 15px;
      max-width: 90%;
    }
  }

  /* Very small screens */
  @media only screen and (max-width: 480px) {
    .lightbox-content {
      max-height: 70vh;
    }
    
    .lightbox-close {
      top: 10px;
      right: 10px;
      font-size: 35px;
      width: 45px;
      height: 45px;
    }
    
    .lightbox-nav {
      font-size: 35px;
      width: 50px;
      height: 50px;
    }
    
    .lightbox-prev {
      left: 10px;
    }
    
    .lightbox-next {
      right: 10px;
    }
    
    .lightbox-caption {
      font-size: 14px;
      padding: 10px 12px;
      margin-top: 10px;
    }
  }

  /* Hide scrollbars when lightbox is open */
  body.lightbox-open {
    overflow: hidden;
  }
</style>

<script is:inline>
  function initLightbox() {
    const lightbox = document.getElementById('lightbox');
    const lightboxImg = document.getElementById('lightbox-img');
    const lightboxCaption = document.getElementById('lightbox-caption');
    const lightboxCounter = document.getElementById('lightbox-counter');
    const closeBtn = document.querySelector('.lightbox-close');
    const prevBtn = document.getElementById('lightbox-prev');
    const nextBtn = document.getElementById('lightbox-next');

    let currentImages = [];
    let currentIndex = 0;

    // Function to update navigation buttons
    function updateNav() {
      prevBtn.classList.toggle('disabled', currentIndex === 0);
      nextBtn.classList.toggle('disabled', currentIndex === currentImages.length - 1);
      
      if (currentImages.length > 1) {
        lightboxCounter.textContent = `${currentIndex + 1} / ${currentImages.length}`;
        lightboxCounter.style.display = 'block';
        prevBtn.style.display = 'flex';
        nextBtn.style.display = 'flex';
      } else {
        lightboxCounter.style.display = 'none';
        prevBtn.style.display = 'none';
        nextBtn.style.display = 'none';
      }
    }

    // Function to show current image
    function showCurrentImage() {
      if (currentImages[currentIndex]) {
        lightboxImg.style.opacity = '0';
        setTimeout(() => {
          lightboxImg.src = currentImages[currentIndex].src;
          lightboxCaption.innerHTML = currentImages[currentIndex].caption;
          lightboxImg.style.opacity = '1';
        }, 100);
        updateNav();
      }
    }

    // Function to open lightbox
    function openLightbox(images, startIndex = 0) {
      currentImages = images;
      currentIndex = startIndex;
      lightbox.style.display = 'block';
      document.body.classList.add('lightbox-open');
      
      // Prevent background scrolling on mobile
      document.body.style.position = 'fixed';
      document.body.style.top = `-${window.scrollY}px`;
      document.body.style.width = '100%';
      
      showCurrentImage();
    }

    // Function to close lightbox
    function closeLightbox() {
      lightbox.style.display = 'none';
      document.body.classList.remove('lightbox-open');
      
      // Restore scroll position
      const scrollY = document.body.style.top;
      document.body.style.position = '';
      document.body.style.top = '';
      document.body.style.width = '';
      window.scrollTo(0, parseInt(scrollY || '0') * -1);
    }

    // Function to go to previous image
    function prevImage() {
      if (currentIndex > 0) {
        currentIndex--;
        showCurrentImage();
      }
    }

    // Function to go to next image
    function nextImage() {
      if (currentIndex < currentImages.length - 1) {
        currentIndex++;
        showCurrentImage();
      }
    }

    // Add click events to clickable images
    document.querySelectorAll('.clickable-image').forEach(img => {
      img.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        // Find all images in the same gallery group
        const galleryGroup = this.getAttribute('data-gallery') || 'default';
        const galleryImages = Array.from(document.querySelectorAll(`[data-gallery="${galleryGroup}"]`));
        
        const images = galleryImages.map(img => ({
          src: img.src,
          caption: img.getAttribute('data-caption') || img.alt || ''
        }));
        
        const startIndex = galleryImages.indexOf(this);
        openLightbox(images, startIndex);
      });
    });

    // Navigation event listeners
    prevBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      if (!prevBtn.classList.contains('disabled')) {
        prevImage();
      }
    });

    nextBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      if (!nextBtn.classList.contains('disabled')) {
        nextImage();
      }
    });

    // Close lightbox when clicking the X
    closeBtn.addEventListener('click', closeLightbox);

    // Close lightbox when clicking outside the image
    lightbox.addEventListener('click', function(e) {
      if (e.target === lightbox || e.target === this.querySelector('.lightbox-container')) {
        closeLightbox();
      }
    });

    // Keyboard navigation
    document.addEventListener('keydown', function(e) {
      if (lightbox.style.display === 'block') {
        switch(e.key) {
          case 'Escape':
            closeLightbox();
            break;
          case 'ArrowLeft':
            e.preventDefault();
            if (!prevBtn.classList.contains('disabled')) {
              prevImage();
            }
            break;
          case 'ArrowRight':
            e.preventDefault();
            if (!nextBtn.classList.contains('disabled')) {
              nextImage();
            }
            break;
        }
      }
    });
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLightbox);
  } else {
    initLightbox();
  }
</script>